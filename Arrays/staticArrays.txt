Staticlly typed languages like Java, C++ and C# have arrays that need to be allocated a size and data type when initialised. These are known as static arrays.

Languages like Python and Javascript have dynamic arrays and does not need to be initialised before use.

READING FROM AN ARRAY
To read an individual element in an array we can choose the postion we want to access via the index, e.g. arr[index]. 

In JavaScript:

let myArray = [1,3,5];

myArray[0] would return 1.


Accessing an element in an array is instant because each values is mapped to an address in the RAM regardless of size. This operation is referred to O(1) in terms of time complexity. There is a comman confusion that O(1) is always fast but that is not the case because the complexity could still be O(1). If the number of operations does not grow as size the size of the data or input grows then it is O(1).


TRAVERSING THROUGH AN ARRAY
We can also read all values of an array by traversing through it. Below is an example of how myArray can be traversed from the start to the end using loops.

let myArray = [1,2,3];

for(let i = 0; i < myArray.length - 1; i++){
	console.log(myArray[i]);
}

Will return:
1
2
3

The last element in array is always array.length - 1 and first of course is 0.

The time complexity to travesrse an array of size n the time complexity is O(n) meaning the numebr of operations grows linearly with the size of the array.

DELETING FROM AN ARRAY
In statically typed languages all array indices are filled with 0s or some default value upon intialisation by denoting an empty array.

When we want to remove an element from the last index of an array, settings its value to 0, null or -1 is the best we can do. This is known as a soft delete. The element is not being deleted but is instead being overwritten by a value that denotes an empty index. We will also reduce the length of the array by 1 since we have one less element in the array after deletion. 

let arr = [1,2,3]; 
let length = arr.length - 1; // This will be 2 of course

for(let i = 0; i <= length; i ++){
	if(i === length){
		arr[i] = 0;
		length--; 
	}
}

DELETING FROM iTH INDEX
Instead of deleting at the end, what if we wanted to delete and element at a random index of i? Would it be able to perform at O(1)?
Deleting from the end of an array doesn't make it non contiguous but deleting from the middle will make it non contiguous. Below is how you can delete from the middle of an array and keep it contiguous:


let arr = [1,2,3];
let length = [arr.length - 1];


function removeMiddle(array, length){

    if(length % 2 === 0){
        let mid = length / 2;

        for(let i = mid; i < length; i++){
            array[i] = array[i + 1];
            array[length] = 0;
        }
    }

    if(length % 2 === 1){
        let mid = ((length - 1) / 2) + 1;

        for(let i = mid; i < length; i++){
            array[i] = array[i + 1];
            array[length] = 0;
        }
    }

    return array;
}

console.log(removeMiddle(arr. length));

returns [1,3,0]

The worst case would be that we need to shift all of the elements to the left. This would occur if the target index is the index of the array. Therefore the code above is O(n).

INSERTION
If we want to isnert an element at the end of an array,we can simply insert it at the next open position which will be at index length where length is the number of elements in the array.

// Insert n into arr at the next open position.
// Length is the number of 'real' values in arr, and capacity
// is the size (aka memory allocated for the fixed size array).
insertEnd(arr, n, length,  capacity) {
    if (length < capacity) {
        arr[length] = n;
    }
}

INSERTION AT iTH INDEX
Inserting at an arbitrary index i is more involved since we may insert in the middle of the array.


Consider the array [4, 5, 6]. If we need to insert at index i = 1, or i = 0, we cannot overwrite the original value because we would lose it. Instead, we will need to shift all values, starting at index i, one position to the right. Below is the code and visual demonstrating this.

// Insert n into index i after shifting elements to the right.
// Assuming i is a valid index and arr is not full.
insertMiddle(arr, i, n, length) {
    // Shift starting from the end to i.
    for (let index = length - 1; index > i - 1; index--) {
        arr[index + 1] = arr[index];
    }
    //Insert at i
    arr[i] = n;
}

